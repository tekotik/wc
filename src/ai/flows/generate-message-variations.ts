'use server';

/**
 * @fileOverview Generates message copy variations based on campaign details using an AI tool to enhance engagement.
 *
 * - generateMessageVariations - A function that generates message copy variations.
 * - GenerateMessageVariationsInput - The input type for the generateMessageVariations function.
 * - GenerateMessageVariationsOutput - The return type for the generateMessageVariations function.
 */

import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/googleai';
import { z } from 'zod';
import * as dotenv from 'dotenv';

dotenv.config();

// Configure Genkit with the Google AI plugin.
// It will automatically use the GOOGLE_API_KEY from your .env file.
const ai = genkit({
  plugins: [googleAI()],
});


const GenerateMessageVariationsInputSchema = z.object({
  details: z
    .string()
    .describe('Details about the mailing, including the target audience, goals, and key message points.'),
  numberOfVariations: z
    .number()
    .int()
    .positive()
    .default(3)
    .describe('The number of message copy variations to generate.'),
});
export type GenerateMessageVariationsInput = z.infer<
  typeof GenerateMessageVariationsInputSchema
>;

const GenerateMessageVariationsOutputSchema = z.object({
  messageVariations: z
    .array(z.string())
    .describe('An array of clean message copy variations generated by the AI, without any prefixes like "Вариант 1:" or markdown formatting.'),
});
export type GenerateMessageVariationsOutput = z.infer<
  typeof GenerateMessageVariationsOutputSchema
>;

const prompt = ai.definePrompt({
  name: 'generateMessageVariationsPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: { schema: GenerateMessageVariationsInputSchema },
  output: { schema: GenerateMessageVariationsOutputSchema },
  prompt: `You are an AI copywriter specializing in creating engaging message copy. Generate all responses in Russian.

Based on the following mailing details, generate {{{numberOfVariations}}} distinct message copy variations.

Mailing Details: {{{details}}}

IMPORTANT: The output must be a JSON object. The 'messageVariations' array should contain only the raw message text. Do not add any prefixes like "Вариант 1:", titles, or markdown formatting like asterisks to the strings within the array.`,
});

const generateMessageVariationsFlow = ai.defineFlow(
  {
    name: 'generateMessageVariationsFlow',
    inputSchema: GenerateMessageVariationsInputSchema,
    outputSchema: GenerateMessageVariationsOutputSchema,
  },
  async (flowInput) => {
    const { output } = await prompt(flowInput);
    return output!;
  }
);


export async function generateMessageVariations(
  input: GenerateMessageVariationsInput
): Promise<GenerateMessageVariationsOutput> {
  return generateMessageVariationsFlow(input);
}
