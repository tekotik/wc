// Use server directive is required when using Genkit.
'use server';

/**
 * @fileOverview Generates message copy variations based on campaign details using an AI tool to enhance engagement.
 *
 * - generateMessageVariations - A function that generates message copy variations.
 * - GenerateMessageVariationsInput - The input type for the generateMessageVariations function.
 * - GenerateMessageVariationsOutput - The return type for the generateMessageVariations function.
 */

import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/googleai';
import { z } from 'zod';

const GenerateMessageVariationsInputSchema = z.object({
  apiKey: z.string(),
  campaignDetails: z
    .string()
    .describe('Details about the campaign, including the target audience, goals, and key message points.'),
  numberOfVariations: z
    .number()
    .int()
    .positive()
    .default(3)
    .describe('The number of message copy variations to generate.'),
});
export type GenerateMessageVariationsInput = z.infer<
  typeof GenerateMessageVariationsInputSchema
>;

const GenerateMessageVariationsOutputSchema = z.object({
  messageVariations: z
    .array(z.string())
    .describe('An array of message copy variations generated by the AI.'),
});
export type GenerateMessageVariationsOutput = z.infer<
  typeof GenerateMessageVariationsOutputSchema
>;

export async function generateMessageVariations(
  input: GenerateMessageVariationsInput
): Promise<GenerateMessageVariationsOutput> {
  const ai = genkit({
    plugins: [
      googleAI({
        apiKey: input.apiKey,
      }),
    ],
  });

  const prompt = ai.definePrompt({
    name: 'generateMessageVariationsPrompt',
    input: { schema: GenerateMessageVariationsInputSchema.omit({ apiKey: true }) },
    output: { schema: GenerateMessageVariationsOutputSchema },
    prompt: `You are an AI copywriter specializing in creating engaging message copy.

  Based on the following campaign details, generate {{{numberOfVariations}}} message copy variations. The message copy variations should be different from one another.

  Campaign Details: {{{campaignDetails}}}

  Message Copy Variations:`,
  });

  const generateMessageVariationsFlow = ai.defineFlow(
    {
      name: 'generateMessageVariationsFlow',
      inputSchema: GenerateMessageVariationsInputSchema.omit({ apiKey: true }),
      outputSchema: GenerateMessageVariationsOutputSchema,
    },
    async (flowInput) => {
      const { output } = await prompt(flowInput);
      return output!;
    }
  );

  const { apiKey, ...flowInput } = input;
  return generateMessageVariationsFlow(flowInput);
}
